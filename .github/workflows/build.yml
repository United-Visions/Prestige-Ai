name: Build Prestige AI - All Platforms
on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:  # Allow manual triggering

jobs:
  build:
    name: Build ${{ matrix.platform }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macOS'
            os: 'macos-latest'
            build_cmd: '--mac'
            artifact_path: 'builds/v*/mac'
          - platform: 'Windows'
            os: 'windows-latest'
            build_cmd: '--win'
            artifact_path: 'builds/v*/windows'
          - platform: 'Linux'
            os: 'ubuntu-latest'
            build_cmd: '--linux'
            artifact_path: 'builds/v*/linux'
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Setup Python (for native dependencies)
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'
        
    - name: Install native build tools (macOS)
      if: matrix.platform == 'macOS'
      run: |
        # Already available on macOS runners
        echo "Native tools ready on macOS"
        
    - name: Install native build tools (Windows)  
      if: matrix.platform == 'Windows'
      run: |
        npm install --global windows-build-tools || echo "Build tools installation completed"
        
    - name: Install native build tools (Linux)
      if: matrix.platform == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential libnss3-dev libatk-bridge2.0-dev libdrm2 libxkbcommon-dev libgtk-3-dev
        
    - name: Rebuild native dependencies
      run: npm run rebuild
      continue-on-error: true  # Don't fail if sqlite3 rebuild has issues
      
    - name: Build TypeScript
      run: npx tsc
      
    - name: Build renderer
      run: npx vite build
      
    - name: Build Electron App
      run: npx electron-builder ${{ matrix.build_cmd }} --publish=never
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: List build artifacts
      run: |
        echo "Build completed! Artifacts:"
        ls -la builds/ || echo "No builds directory"
        find builds/ -name "*.dmg" -o -name "*.exe" -o -name "*.AppImage" -o -name "*.zip" -o -name "*.tar.gz" 2>/dev/null || echo "No distributable files found"
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: prestige-ai-${{ matrix.platform }}-v0.1.5
        path: |
          ${{ matrix.artifact_path }}/
          !**/node_modules
        retention-days: 30
        if-no-files-found: warn

  create-release:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' || startsWith(github.ref, 'refs/tags/v')
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Get version from package.json
      id: get_version
      run: |
        VERSION=$(node -p "require('./package.json').version")
        echo "version=v$VERSION" >> $GITHUB_OUTPUT
        echo "Version: v$VERSION"
    
    - name: Create tag (if manual trigger)
      if: github.event_name == 'workflow_dispatch'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        if ! git rev-parse ${{ steps.get_version.outputs.version }} >/dev/null 2>&1; then
          git tag ${{ steps.get_version.outputs.version }}
          git push origin ${{ steps.get_version.outputs.version }}
          echo "Created and pushed tag: ${{ steps.get_version.outputs.version }}"
        else
          echo "Tag already exists: ${{ steps.get_version.outputs.version }}"
        fi
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./artifacts
        
    - name: Display downloaded artifacts
      run: |
        echo "Downloaded artifacts:"
        find ./artifacts -type f \( -name "*.dmg" -o -name "*.exe" -o -name "*.AppImage" -o -name "*.zip" -o -name "*.tar.gz" \) -ls
        
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.get_version.outputs.version }}
        name: "Prestige AI ${{ steps.get_version.outputs.version }}"
        files: |
          ./artifacts/**/*.dmg
          ./artifacts/**/*.exe
          ./artifacts/**/*.AppImage
          ./artifacts/**/*.zip
          ./artifacts/**/*.tar.gz
        draft: false
        prerelease: false
        generate_release_notes: true
        body: |
          ## ðŸŽ‰ Prestige AI ${{ steps.get_version.outputs.version }}
          
          ### âœ¨ What's New
          - ðŸŽ¨ **New High-Resolution App Icon**: Beautiful Prestige AI logo with purple gradient, gold crown, and crisp details
          - ðŸ”§ **Improved Build System**: Organized build directory structure  
          - ðŸš€ **Cross-Platform Support**: macOS, Windows, and Linux builds
          
          ### ðŸ“± Download Your Platform
          - **macOS**: Download the `.dmg` file
          - **Windows**: Download the `.exe` installer  
          - **Linux**: Download the `.AppImage` file
          
          ### ðŸŽ¯ Features
          - AI-powered code assistance
          - Electron-based desktop application
          - Modern React interface
          - SQLite database integration
          
          **Built from commit**: ${{ github.sha }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}